XSS Experimental Minimal Encoding Rules
========================================
https://www.owasp.org/index.php/XSS_Experimental_Minimal_Encoding_Rules

在 script 标签内
-----------------
如 ``<script>{{DATA}}</script>``

+ 只使用这些转义 ``\\ \r \n \b \t \f \' \" \/`` 。
+ 对于 ``0..0x19`` 之间的字符，使用 16 进制转义。
+ 对于非 unicode 编码，对大于 ``0x7e`` 的字符，使用 ``\u`` 进行转义。


在事件处理函数内
-----------------
如 ``onclick="{{DATA}}"``

+ 只使用这些转义 ``\\ \r \n \b \t \f`` 。
+ 对 ``' " &`` ，使用 16 进制转义。
+ 对于 ``0..0x19`` 之间的字符，使用 16 进制转义。
+ 对于非 unicode 编码，对大于 ``0x7e`` 的字符，使用 ``\u`` 进行转义。


在普通标签中（html）
--------------------
如 ``<div>{{DATA}}</div>``

+ 对 ``< &`` 进行实体转义。
+ 指定页面的字符集（charset），避免 UTF7 攻击。


在普通标签中（xhtml）
---------------------
如 ``<div>{{DATA}}</div>``

+ 对 ``< & >`` 进行实体转义。
+ 限制输入编码




分类
=====
XSS 主要分为反射型 XSS，存储型 XSS 和基于 DOM 的 XSS 。


DOM based XSS Prevention Cheat Sheet
=====================================
https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet

浏览器在输出页面时，对于不同的输入，会采取不同的规则，在不同的环境中进行渲染。
如 HTML 和 JS 是在不同的上下文环境中进行处理的。
由于不同环境需要交流，攻击提供了可能。


1. 修改 html 的时候，应该先对数据进行 html 转义，再进行 js 转义，最后修改。

2. 修改 html 标签的 `事件处理函数` 、 `样式` 、 `链接` **以外** 的属性时，
   应该对数据进行 js 转义，然后修改。

   这里不需要进行 html 转义是因为这些属性不是可执行的代码。
   只要确保数据保留在引号内，避免生成其他属性或引入新脚本。

3. 修改标签的事件处理函数时要格外小心。因为即使进行了 js 转义，数据还是有危险。

   想要避免在这种情况下出现 XSS 漏洞，
   最好的做法就是不要在事件处理函数中引入未知数据。

   使用 ``setAttribute`` 修改事件处理函数时，
   是将字符串转换成了可执行的 js 代码，而这个字符串的安全性是没有保证的。
   （包括 ``setTimeout`` 在内的几个函数，都可以把字符串转换为 js 代码，
   也都面临相同的问题。）
   比如 ``document.querySelector('a').setAttribute('onclick', '\u0061\u006c\u0065\u0072\u0074\u0028\u0031\u0029')`` 。

   直接设置属性（property）可以避免这种情况。
   ``document.querySelector('a').onclick = '\u0061\u006c\u0065\u0072\u0074\u0028\u0031\u0029'``
   是无效的，因为没有进行将字符串转换成 js 代码。
   包括 ``<a href="#" onclick="\u0061\u006c\u0065\u0072\u0074\u0028\u0031\u0029">link</a>``
   也是无效的，因为 ``()`` 不合法。
   但要注意，如果定义了一个函数，然后字符串是函数名，
   那么 ``onclick`` 会被赋值。


4. 修改标签的样式时，应该先对数据进行 url 转义，再进行 js 转义，最后修改。
   这是因为在 css 中可能出现链接，
   比如 ``node.style.backgroundImage='url()'`` 。

5. 修改标签的链接时，应该先对数据进行 url 转义，再进行 js 转义，最后修改。
   （还可以检查下协议是否为 `javascript:` 。）


建议
-----

1. 未知数据只用于修改文字内容，不用于修改标签、属性等。
2. 对未知数据进行 js 转义，使用引号包裹。
3. 使用 DOM 方法修改页面，不要使用 ``innerHTML`` 之类的方法。
   对于会成为可执行代码的属性，要格外注意。
4. 弄清未知数据在代码中是如何传递的。
5. 某些函数会暗含了 ``eval`` ，要避免把未知数据传递给这些函数。

编译安装
=========

::

    $ ./configure ...... --add-module=/path/to/module






控制
=====

向主进程发送信号

+-----------+------------------------------------+
| signal    | usage                              |
+===========+====================================+
| TERM, INT | 关闭进程                           |
+-----------+------------------------------------+
| QUIT      | 当前的请求完成后关闭进程           |
+-----------+------------------------------------+
| HUP       | 重新读取配置                       |
+-----------+------------------------------------+
| USR1      | 重新打开日志                       |
+-----------+------------------------------------+
| USR2      | 更新可执行文件                     |
+-----------+------------------------------------+
| WINCH     | 在执行进程完成请求后，关闭执行进程 |
+-----------+------------------------------------+

向执行进程发送信号

+-----------+--------------------------+
| signal    | usage                    |
+===========+==========================+
| TERM, INT | 关闭进程                 |
+-----------+--------------------------+
| QUIT      | 当前的请求完成后关闭进程 |
+-----------+--------------------------+
| USR1      | 重新打开日志             |
+-----------+--------------------------+
| WINCH     | 关闭进程（用于除错）     |
+-----------+--------------------------+







基本配置
=========

+--------------------+--------------------------------------------+
| directive          | usage                                      |
+====================+============================================+
| worker_processes   | 执行进程的数目。                           |
|                    | 对于 CPU 密集型的程序，设置为 CPU 核心数。 |
|                    | 对于 IO 密集型的程序，                     |
|                    | 设置为 CPU 核心数的 1.5 到 2 倍。          |
+--------------------+--------------------------------------------+
| error_log          | /var/log/nginx/error.log，日志。           |
+--------------------+--------------------------------------------+
| use                | epoll / kqueue                             |
+--------------------+--------------------------------------------+
| worker_connections | 执行进程保持的最大连接数。                 |
+--------------------+--------------------------------------------+
| include            | 可以灵活地添加配置。                       |
+--------------------+--------------------------------------------+
| user               | 执行进程的用户名和用户组。                 |
+--------------------+--------------------------------------------+
| pid                | /var/run/nginx.pid，保存主进程的进程 ID。  |
+--------------------+--------------------------------------------+






http 模块
==========

+-------------------+-------+
| directive         | usage |
+===================+=======+
| keepalive_timeout |       |
+-------------------+-------+
| sendfile          |       |
+-------------------+-------+
| tcp_nopush        |       |
+-------------------+-------+
| tcp_nodelay       |       |
+-------------------+-------+


每个 ``server`` 块都是个虚拟的服务器，
``listen`` 和 ``server_name`` 定义了这个虚拟服务器。

``listen`` 定义了端口和地址，而 ``server_name`` 和请求中的 ``Host`` 对应。

``server_name`` 默认是空值（ ``""`` ），（只）可以在头尾使用通配符 ``*`` ，
也可以使用正则表达式。

::

    server_name example.com www.example.com;
    server_name .example.com; # 会匹配 *.example.com 和 example.com
    server_name fourm.example.com;
    server_name *.example.com;
    server_name www.example.*;
    server_name ~^www\.example\.com$; # 正则要以 `~` 开头
    server_name "~^(?P<name>\w{1,3})\.example\.com$"; # 带 `{}` 的正则要用引号包围

在匹配多个 ``server_name`` 的情况下，会按照如下顺序进行选择：

1. 完整的匹配
2. 最长的前通配符匹配
3. 最长的后通配符匹配
4. 配置中出现的第一个匹配的正则

::

    # 假设有
    server_name www.cn.example.com;
    server_name *.cn.example.com;
    server_name *.example.com;
    server_name www.cn.*;
    server_name www.*;
    server_name ~^.*\.example\..*$;
    # 匹配的顺序就是上面的顺序了

``listen`` 的匹配优先级要比 ``server_name`` 高。

``location`` 用来将虚拟地址映射到真实地址。
